<?xml version="1.0"?>
<launch>
    <!-- LiDAR sensor arguments -->
    <arg name="return_mode" default="Dual" description="See readme for supported return modes"/>
    <arg name="scan_phase" default="0.0" />

    <arg name="host_ip" default="192.168.3.200" description="Broadcast IP from Sensor"/>
    <arg name="top_lidar_ip" default="192.168.3.201" description="Top LiDAR Sensor IP"/>
    <arg name="left_lidar_ip" default="192.168.3.202" description="Left LiDAR Sensor IP"/>
    <arg name="right_lidar_ip" default="192.168.3.203" description="Right LiDAR Sensor IP"/>

    <arg name="gnss_port" default="2369" description="LiDAR GNSS Port"/>
    <arg name="top_lidar_port" default="2368" description="Top LiDAR data Port"/>
    <arg name="left_lidar_port" default="2367" description="Left LiDAR data Port"/>
    <arg name="right_lidar_port" default="2366" description="Right LiDAR data Port"/>

    <arg name="packet_mtu_size" default="1500" description="Packet MTU size"/>
    <arg name="rotation_speed" default="600" description="Motor RPM, the sensor's internal spin rate."/>
    <arg name="cloud_max_angle" default="360" description="Field of View, end degrees."/>
    <arg name="cloud_min_angle" default="0" description="Field of View, start degrees."/>
    <arg name="diag_span" default="1000" description="milliseconds"/>
    <arg name="setup_sensor" default="True" description="Enable sensor setup on hw-driver."/>

    <arg name="launch_hw" default="True" />
    <arg name="dual_return_distance_threshold" default="0.1" description="Distance threshold of dual return mode"/>
    <arg name="ptp_profile" default="1588v2" description="1588v2|802.1as|automotive"/>
    <arg name="ptp_domain" default="0" description="PTP Domain [0-127]."/>
    <arg name="ptp_transport_type" default="UDP" description="1588v2 supports 'UDP' or 'L2', other profiles only L2 (HW)"/>
    <arg name="ptp_switch_type" default="TSN" description="For automotive profile,'TSN' or 'NON_TSN'"/>
    <arg name="delay_hw_ms" default="1000" description="hw driver startup delay in milliseconds."/>
    <arg name="delay_monitor_ms" default="2000" description="hw monitor startup delay in milliseconds."/>
    <arg name="retry_hw" default="True" description="hw driver startup retry (false when using pcap)."/>
    <arg name="debug_logging" default="False" description="Launches Monitor/HW Interfaces and calibration acquisition"/>
   
    <let name="debug_level" value="debug" if="$(eval $(var debug_logging))"/>
    <let name="debug_level" value="info" unless="$(eval $(var debug_logging))"/>

    <!-- GPS/IMU sensor arguments -->
    <arg name="gps_ip" default="192.168.10.60" description="GPS/IMU Sensor IP"/>

    <group>
        <push-ros-namespace namespace="sensing"/>
        <!--LiDAR sensor launch -->
        <group>
            <push-ros-namespace namespace="lidar"/>
            <group>
                <push-ros-namespace namespace="top"/>
                <node pkg="nebula_ros" exec="hesai_driver_ros_wrapper_node"
                    name="hesai_cloud" output="screen" ros_args="--log-level $(var debug_level)">
                    <param name="sensor_model" value="Pandar64"/>
                    <param name="return_mode" value="$(var return_mode)"/>
                    <param name="frame_id" value="hesai_top"/>
                    <param name="scan_phase" value="$(var scan_phase)"/>
                    <param name="sensor_ip" value="$(var top_lidar_ip)"/>
                    <param name="calibration_file" value="$(find-pkg-share nebula_decoders)/calibration/hesai/Pandar64.csv"/>
                    <param name="correction_file" value="$(find-pkg-share nebula_decoders)/calibration/hesai/Pandar64.dat"/>
                    <param name="launch_hw" value="$(var launch_hw)"/>
                </node>
                <group if="$(var launch_hw)">
                <node pkg="nebula_ros" exec="hesai_hw_interface_ros_wrapper_node"
                    name="hesai_hw_driver" output="screen" >
                    <param name="sensor_model" value="Pandar64"/>
                    <param name="return_mode" value="$(var return_mode)"/>
                    <param name="frame_id" value="hesai_top"/>
                    <param name="scan_phase" value="$(var scan_phase)"/>
                    <param name="sensor_ip" value="$(var top_lidar_ip)"/>
                    <param name="host_ip" value="$(var host_ip)"/>
                    <param name="data_port" value="$(var top_lidar_port)"/>
                    <param name="gnss_port" value="$(var gnss_port)"/>
                    <param name="packet_mtu_size" value="$(var packet_mtu_size)"/>
                    <param name="rotation_speed" value="$(var rotation_speed)"/>
                    <param name="cloud_min_angle" value="$(var cloud_min_angle)"/>
                    <param name="cloud_max_angle" value="$(var cloud_max_angle)"/>
                    <param name="dual_return_distance_threshold" value="$(var dual_return_distance_threshold)"/>
                    <param name="setup_sensor" value="$(var setup_sensor)"/>
                    <param name="delay_hw_ms" value="$(var delay_hw_ms)"/>
                    <param name="retry_hw" value="$(var retry_hw)"/>
                    <param name="ptp_profile" value="$(var ptp_profile)"/>
                    <param name="ptp_domain" value="$(var ptp_domain)"/>
                    <param name="ptp_transport_type" value="$(var ptp_transport_type)"/>
                    <param name="ptp_switch_type" value="$(var ptp_switch_type)"/>
                </node>
                </group>
            </group>
            <group>
                <push-ros-namespace namespace="left"/>
                <node pkg="nebula_ros" exec="velodyne_driver_ros_wrapper_node"
                    name="velodyne_cloud" output="screen">
                    <param name="sensor_model" value="VLP16"/>
                    <param name="return_mode" value="$(var return_mode)"/>
                    <param name="frame_id" value="velodyne_left"/>
                    <param name="scan_phase" value="$(var scan_phase)"/>
                    <param name="calibration_file" value="$(find-pkg-share nebula_decoders)/calibration/velodyne/VLP16.yaml"/>
                </node>
                <node pkg="nebula_ros" exec="velodyne_hw_ros_wrapper_node"  
                    name="velodyne_hw_driver" output="screen">
                    <param name="sensor_model" value="VLP16"/>
                    <param name="return_mode" value="$(var return_mode)"/>
                    <param name="frame_id" value="velodyne_left"/>
                    <param name="scan_phase" value="$(var scan_phase)"/>
                    <param name="sensor_ip" value="$(var left_lidar_ip)"/>
                    <param name="host_ip" value="$(var host_ip)"/>
                    <param name="data_port" value="$(var left_lidar_port)"/>
                    <param name="gnss_port" value="$(var gnss_port)"/>
                    <param name="packet_mtu_size" value="$(var packet_mtu_size)"/>
                    <param name="rotation_speed" value="$(var rotation_speed)"/>
                    <param name="cloud_min_angle" value="$(var cloud_min_angle)"/>
                    <param name="cloud_max_angle" value="$(var cloud_max_angle)"/>
                    <param name="setup_sensor" value="$(var setup_sensor)"/>
                </node>
            </group>
            <group>
                <push-ros-namespace namespace="right"/>
                <node pkg="nebula_ros" exec="velodyne_driver_ros_wrapper_node"
                    name="velodyne_cloud" output="screen">
                    <param name="sensor_model" value="VLP16"/>
                    <param name="return_mode" value="$(var return_mode)"/>
                    <param name="frame_id" value="velodyne_right"/>
                    <param name="scan_phase" value="$(var scan_phase)"/>
                    <param name="calibration_file" value="$(find-pkg-share nebula_decoders)/calibration/velodyne/VLP16.yaml"/>
                </node>
                <node pkg="nebula_ros" exec="velodyne_hw_ros_wrapper_node"  
                    name="velodyne_hw_driver" output="screen">
                    <param name="sensor_model" value="VLP16"/>
                    <param name="return_mode" value="$(var return_mode)"/>
                    <param name="frame_id" value="velodyne_right"/>
                    <param name="scan_phase" value="$(var scan_phase)"/>
                    <param name="sensor_ip" value="$(var right_lidar_ip)"/>
                    <param name="host_ip" value="$(var host_ip)"/>
                    <param name="data_port" value="$(var right_lidar_port)"/>
                    <param name="gnss_port" value="$(var gnss_port)"/>
                    <param name="packet_mtu_size" value="$(var packet_mtu_size)"/>
                    <param name="rotation_speed" value="$(var rotation_speed)"/>
                    <param name="cloud_min_angle" value="$(var cloud_min_angle)"/>
                    <param name="cloud_max_angle" value="$(var cloud_max_angle)"/>
                    <param name="setup_sensor" value="$(var setup_sensor)"/>
                </node>
            </group>
        </group>
        <include file="$(find-pkg-share novatel_oem7_driver)/launch/oem7_net.launch.py">
            <arg name="oem7_ip_addr" value="$(var gps_ip)"/>
        </include>
    </group>
    <!-- <remap from="/sensing/novatel/oem7/fix" to="/sensing/gnss/ublox/nav_sat_fix"/>
    <remap from="/sensing/novatel/oem7/imu/data_raw" to="/sensing/imu/tamagawa/imu_raw"/> -->
</launch>